{"version":3,"sources":["components/NewTaskForm/index.js","components/NewTaskForm/NewTaskForm.tsx","components/Header/index.js","components/Header/Header.tsx","components/context/SetFilter.ts","components/TasksFilter/TasksFilter.tsx","components/TasksFilter/index.js","components/Footer/index.js","components/Footer/Footer.tsx","components/context/CompletedTask.ts","components/context/EditidTask.ts","components/context/RemoveTask.ts","components/Task/index.js","components/Task/Task.tsx","components/TaskList/index.js","components/TaskList/TaskList.tsx","components/App/App.tsx","components/App/index.js","index.tsx"],"names":["NewTaskForm","className","placeholder","autoFocus","Header","SetFilterContext","createContext","filters","TasksFilter","currentFilter","setFilterContext","useContext","SetFilter","console","log","handleSetFilter","evt","target","dataset","filter","filtersList","map","onClick","data-filter","Footer","removeAllCompletedTask","counter","CompletedTaskContext","EditidTask","RemoveTaskContext","Task","id_","status","description","created","useState","value","setValue","completedTask","CompletedTask","removeTask","RemoveTask","editidTask","type","defaultChecked","onChange","onKeyUp","keyCode","TaskList","tasks","task","key","createFilterList","list","filterName","filterList","toUpperCase","substr","App","count","setCount","setFilter","setFilterList","formatDistanceToNow","Date","setTask","useEffect","taskIds","reduce","acc","shortid","generate","Provider","id","copy","index","findIndex","splice","render","StrictMode","document","getElementById"],"mappings":"qWAEeA,G,MCEe,WAC5B,OACE,2BAAOC,UAAU,WAAWC,YAAY,yBAAyBC,WAAS,MCJ/DC,G,MCGU,WACvB,OACE,4BAAQH,UAAU,UAChB,yCACA,kBAAC,EAAD,SCLSI,EAFUC,wBAA+B,MCIlDC,G,MAAyB,CAAC,MAAO,SAAU,cCJlCC,EDMK,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,cACfC,EAAmBC,qBAAWC,GACpCC,QAAQC,IAAIL,GAEZ,IAAMM,EAAkB,SAACC,GACvB,GAAIN,EAAkB,CACpB,IAAMO,EAAcD,EAAIC,OACxBP,EAAiBO,EAAOC,QAAQC,UAI9BC,EAAkCb,EAAQc,KAAI,SAACF,GAAD,OAClD,4BACE,4BAAQlB,UAAWQ,IAAkBU,EAAS,WAAa,GAAIG,QAASP,EAAiBQ,cAAaJ,GAAUA,OAIpH,OACE,wBAAIlB,UAAU,WACXmB,IEzBQI,G,MCGwF,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,uBAAwBC,EAA6B,EAA7BA,QAASjB,EAAoB,EAApBA,cAOzI,OACE,4BAAQR,UAAU,UAChB,0BAAMA,UAAU,cAAcyB,EAA9B,eACA,kBAAC,EAAD,CAAajB,cAAeA,IAC5B,4BAAQR,UAAU,kBAAkBqB,QATH,SAACN,GAChCS,GACFA,MAOA,sB,QCZSE,EAFcrB,wBAAqD,MCEnEsB,EAFItB,wBAAmE,MCEvEuB,EAFWvB,wBAAoD,MCA/DwB,ECOF,SAAC,GAAmE,IAAjEC,EAAgE,EAAhEA,IAAKC,EAA2D,EAA3DA,OAAQC,EAAmD,EAAnDA,YAAaC,EAAsC,EAAtCA,QAAsC,EACpDC,mBAASF,GAD2C,mBACvEG,EADuE,KAChEC,EADgE,KAExEC,EAAgB3B,qBAAmB4B,GACnCC,EAAa7B,qBAAmB8B,GAChCC,EAAa/B,qBAAgEiB,GA0BnF,OACE,wBAAI3B,UAAW+B,GACb,yBAAK/B,UAAU,QACb,2BAAOA,UAAU,SAAS0C,KAAK,WAAWC,eAA2B,cAAXZ,EAAwBa,SA3BvD,SAAC7B,GAC5BsB,GAAiBP,GACnBO,EAAcP,MA0BZ,+BACE,0BAAM9B,UAAU,eAAegC,GAC/B,0BAAMhC,UAAU,WAAhB,WAAmCiC,EAAnC,SAEF,4BAAQjC,UAAU,mBAClB,4BAAQA,UAAU,oBAAoBqB,QA5BnB,SAACN,GACpBwB,GAAcT,GAChBS,EAAWT,OA4BC,YAAXC,GAAwB,2BAAOW,KAAK,OAAO1C,UAAU,OAAO4C,SAhBxC,SAAC7B,GACxB,IAAMC,EAAcD,EAAIC,OACxBoB,EAASpB,EAAOmB,QAc2EU,QAzBnE,SAAC9B,GACzB,IAAMC,EAAcD,EAAIC,OACpByB,GAAcX,GACI,KAAhBf,EAAI+B,SACNL,EAAWX,EAAKd,EAAOmB,QAqB4FA,MAAOA,MChDnHY,G,MCIyC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACzD,OACE,wBAAIhD,UAAU,aACXgD,EAAM5B,KAAI,gBAAGU,EAAH,EAAGA,IAAQmB,EAAX,8BACT,kBAAC,EAAD,eAAMC,IAAKpB,EAAKA,IAAKA,GAASmB,UCMhCE,G,MAAmB,SAACC,EAAwBC,GAChD,IAAIC,EAA+B,GAEnC,OAAQD,GACN,IAAK,MACHC,EAAaF,EACb,MACF,QACEE,EAAaF,EAAKlC,QAAO,YAA4B,IAAzBa,EAAwB,EAAxBA,OAC1B,QAAIA,GACKA,EAAO,GAAGwB,cAAgBxB,EAAOyB,OAAO,KAAOH,KAO9D,OAAOC,IC/BMG,EDkCO,WAAO,IAAD,EACAvB,mBAAiB,GADjB,mBACnBwB,EADmB,KACZC,EADY,OAEEzB,mBAAiB,OAFnB,mBAEnBhB,EAFmB,KAEX0C,EAFW,OAGU1B,mBAA2B,IAHrC,mBAGnBoB,EAHmB,KAGPO,EAHO,OAID3B,mBAA2B,CAClD,CACEH,OAAQ,YACRC,YAAa,iBACbC,QAAQ,GAAD,OAAK6B,YAAoB,IAAIC,KAAK,KAAM,EAAG,MAEpD,CACEhC,OAAQ,SACRC,YAAa,eACbC,QAAQ,GAAD,OAAK6B,YAAoB,IAAIC,KAAK,KAAM,EAAG,EAAG,EAAG,EAAG,KAApD,MAET,CACEhC,OAAQ,SACRC,YAAa,cACbC,QAAQ,GAAD,OAAK6B,YAAoB,IAAIC,KAAK,KAAM,EAAG,QAlB5B,mBAInBf,EAJmB,KAIZgB,EAJY,KAsB1BC,qBAAU,WACR,IAAMC,EAAUlB,EAAMmB,QAAO,SAACC,EAAuBnB,GAAxB,4BAAiDmB,GAAjD,cAC3BtC,IAAKuC,IAAQC,YACVrB,OACA,IAELe,EAAQE,GACRL,EAAcV,EAAiBe,EAAShD,MACvC,IAEH+C,qBAAU,WACR,IAAMxC,EAAkBuB,EAAMmB,QAAO,SAACC,EAAKnB,GAGzC,MAFoB,cAAhBA,EAAKlB,QACPqC,IACKA,IACN,GACHT,EAASlC,KACR,CAACuB,IA4CJ,OACE,6BAAShD,UAAU,WACjB,kBAAC,EAAD,MACA,6BAASA,UAAU,QACjB,kBAACsC,EAAciC,SAAf,CAAwBpC,MA9CF,SAACqC,GAC3B,IAAMC,EAAsB,YAAOzB,GAC7B0B,EAAgB1B,EAAM2B,WAAU,qBAAG7C,MAA6B0C,KAChEzC,EAA6B0C,EAAKC,GAAO3C,OAE/C0C,EAAKC,GAAO3C,OAAoB,cAAXA,EAAyB,SAAW,YACzDiC,EAAQS,GACRZ,EAAcV,EAAiBsB,EAAMvD,MAwC/B,kBAACsB,EAAW+B,SAAZ,CAAqBpC,MArCJ,SAACqC,GACxB,IAAMC,EAAsB,YAAOzB,GAC7B0B,EAAgB1B,EAAM2B,WAAU,qBAAG7C,MAA6B0C,MACvD,IAAXE,IACFD,EAAKG,OAAOF,EAAO,GACnBV,EAAQS,GACRZ,EAAcV,EAAiBsB,EAAMvD,OAgC/B,kBAAC,EAAWqD,SAAZ,CAAqBpC,MAhBL,SAACqC,EAAmBrC,GAC5C,IAAMsC,EAAsB,YAAOzB,GAC7B0B,EAAgB1B,EAAM2B,WAAU,qBAAG7C,MAA6B0C,KAEtEC,EAAKC,GAAO3C,OAAS,SACrB0C,EAAKC,GAAO1C,YAAcG,EAC1B6B,EAAQS,GACRZ,EAAcV,EAAiBsB,EAAMvD,MAU3B,kBAAC,EAAD,CAAU8B,MAAOM,OAIvB,kBAAC3C,EAAU4D,SAAX,CAAoBpC,MA1BF,SAACkB,GACvBO,EAAUP,GACVQ,EAAcV,EAAiB,YAAIH,GAAQK,MAyBrC,kBAAC,EAAD,CACE7B,uBAnC2B,WACnC,IAAMiD,EAAyB,YAAIzB,GAAO9B,QAAO,kBAAsC,cAAtC,EAAGa,UAEpDiC,EAAQS,GACRZ,EAAcV,EAAiBsB,EAAMvD,KAgC7BO,QAASiC,EACTlD,cAAeU,QElI3B2D,iBACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.8f6b2f4a.chunk.js","sourcesContent":["import NewTaskForm from './NewTaskForm';\n\nexport default NewTaskForm;\n","import React from 'react';\n\nimport './index.css';\n\nconst NewTaskForm: React.FC = () => {\n  return (\n    <input className=\"new-todo\" placeholder=\"What needs to be done?\" autoFocus />\n  );\n};\n\nexport default NewTaskForm;\n","import Header from './Header';\n\nexport default Header;\n","import React from 'react';\n\nimport NewTaskForm from './../NewTaskForm';\nimport './index.css';\n\nconst Header: React.FC = () => {\n  return (\n    <header className=\"header\">\n      <h1>className</h1>\n      <NewTaskForm />\n    </header>\n  );\n};\n\nexport default Header;\n","import { createContext } from 'react';\n\nconst SetFilterContext = createContext<Function | null>(null);\n\nexport default SetFilterContext;\n","import React, { useContext } from 'react';\n\nimport SetFilter from './../context/SetFilter';\nimport TaskFilterTypes from './../interfaces/ITaskFilterTypes';\nimport './index.css';\n\nconst filters: Array<string> = ['All', 'Active', 'Completed'];\n\nconst TasksFilter = ({ currentFilter }: TaskFilterTypes): JSX.Element => {\n  const setFilterContext = useContext(SetFilter);\n  console.log(currentFilter);\n\n  const handleSetFilter = (evt: React.MouseEvent<HTMLButtonElement>): void => {\n    if (setFilterContext) {\n      const target: any = evt.target;\n      setFilterContext(target.dataset.filter);\n    }\n  };\n\n  const filtersList: Array<JSX.Element> = filters.map((filter: string) => (\n    <li>\n      <button className={currentFilter === filter ? 'selected' : ''} onClick={handleSetFilter} data-filter={filter} >{filter}</button>\n    </li>\n  ));\n\n  return (\n    <ul className=\"filters\">\n      {filtersList}\n    </ul>\n  );\n};\n\nexport default TasksFilter;\n","import TasksFilter from './TasksFilter';\n\nexport default TasksFilter;\n","import Footer from './Footer';\n\nexport default Footer;\n","import React from 'react';\n\nimport TasksFilter from './../TasksFilter';\nimport './index.css';\n\nconst Footer: React.FC<{ removeAllCompletedTask: Function, counter: number, currentFilter: string }> = ({ removeAllCompletedTask, counter, currentFilter }) => {\n\n  const handleRemoveAllCompletedTask = (evt: React.MouseEvent<HTMLButtonElement>): void => {\n    if (removeAllCompletedTask)\n      removeAllCompletedTask();\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{counter} items left</span>\n      <TasksFilter currentFilter={currentFilter} />\n      <button className=\"clear-completed\" onClick={handleRemoveAllCompletedTask}>Clear completed</button>\n    </footer>\n  );\n\n};\n\nexport default Footer;\n","import { createContext } from 'react';\n\nconst CompletedTaskContext = createContext<((id_: string | null) => void) | null>(null);\n\nexport default CompletedTaskContext;\n","import { createContext } from 'react';\n\nconst EditidTask = createContext<((id: string | null, value: string) => void) | null>(null);\n\nexport default EditidTask;\n","import { createContext } from 'react';\n\nconst RemoveTaskContext = createContext<((id: string | null) => void) | null>(null);\n\nexport default RemoveTaskContext;\n","import Task from './Task';\n\nexport default Task;\n","import React, { useState, useContext } from 'react';\n\nimport CompletedTask from './../context/CompletedTask';\nimport EditidTask from './../context/EditidTask';\nimport RemoveTask from './../context/RemoveTask';\nimport TaskTypes from './../interfaces/ITask';\n\ntype fnType = ((id: string | null, value?: string) => void) | null;\n\nconst Task = ({ id_, status, description, created }: TaskTypes): JSX.Element => {\n  const [value, setValue] = useState(description);\n  const completedTask = useContext<fnType>(CompletedTask);\n  const removeTask = useContext<fnType>(RemoveTask);\n  const editidTask = useContext<((id: string | null, value: string) => void) | null>(EditidTask);\n\n  const handleToggleCompleteTask = (evt: React.ChangeEvent<HTMLInputElement>): void => {\n    if (completedTask && id_)\n      completedTask(id_);\n  }\n\n  const handleRemoveTask = (evt: React.MouseEvent<HTMLButtonElement>): void => {\n    if (removeTask && id_)\n      removeTask(id_);\n  };\n\n  const handleChangeValue = (evt: React.KeyboardEvent<HTMLInputElement>): void => {\n    const target: any = evt.target;\n    if (editidTask && id_) {\n      if (evt.keyCode === 13) {\n        editidTask(id_, target.value)\n      }\n    }\n  };\n\n  const handleChangeData = (evt: React.ChangeEvent<HTMLInputElement>): void => {\n    const target: any = evt.target;\n    setValue(target.value);\n  };\n\n  return (\n    <li className={status}>\n      <div className=\"view\">\n        <input className=\"toggle\" type=\"checkbox\" defaultChecked={status === 'completed'} onChange={handleToggleCompleteTask} />\n        <label>\n          <span className=\"description\">{description}</span>\n          <span className=\"created\">created {created} ago</span>\n        </label>\n        <button className=\"icon icon-edit\"></button>\n        <button className=\"icon icon-destroy\" onClick={handleRemoveTask}></button>\n      </div>\n      {status === 'editing' && <input type=\"text\" className=\"edit\" onChange={handleChangeData} onKeyUp={handleChangeValue} value={value} />}\n    </li>\n  );\n};\n\nexport default Task;\n","import TaskList from './TaskList';\n\nexport default TaskList;\n","import React from 'react';\n\nimport TaskTypes from './../interfaces/ITask';\nimport Task from './../Task';\nimport './index.css';\n\nconst TaskList: React.FC<{ tasks: Array<TaskTypes> }> = ({ tasks }) => {\n  return (\n    <ul className=\"todo-list\">\n      {tasks.map(({ id_, ...task }: TaskTypes) => (\n        <Task key={id_} id_={id_} {...task} />\n      ))}\n    </ul >\n  );\n};\n\nexport default TaskList;\n","import React, { useState, useEffect } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport shortid from 'shortid';\n\n\nimport Header from './../Header';\nimport Footer from './../Footer';\nimport TaskList from './../TaskList';\n\nimport CompletedTask from './../context/CompletedTask';\nimport RemoveTask from './../context/RemoveTask';\nimport EditidTask from './../context/EditidTask';\nimport SetFilter from './../context/SetFilter';\nimport TaskTypes from './../interfaces/ITask';\nimport './index.css';\n\nconst createFilterList = (list: Array<TaskTypes>, filterName: string): Array<TaskTypes> => {\n  let filterList: Array<TaskTypes> = [];\n\n  switch (filterName) {\n    case 'All':\n      filterList = list;\n      break;\n    default:\n      filterList = list.filter(({ status }: TaskTypes) => {\n        if (status) {\n          return status[0].toUpperCase() + status.substr(1) === filterName;\n        }\n        return false;\n      });\n      break;\n  }\n\n  return filterList;\n};\n\nconst App: React.FC = () => {\n  const [count, setCount] = useState<number>(0);\n  const [filter, setFilter] = useState<string>('All');\n  const [filterList, setFilterList] = useState<Array<TaskTypes>>([]);\n  const [tasks, setTask] = useState<Array<TaskTypes>>([\n    {\n      status: 'completed',\n      description: 'Completed task',\n      created: `${formatDistanceToNow(new Date(2014, 6, 2))}`\n    },\n    {\n      status: 'active',\n      description: 'Editing task',\n      created: `${formatDistanceToNow(new Date(2015, 0, 1, 0, 0, 15))} `\n    },\n    {\n      status: 'active',\n      description: 'Active task',\n      created: `${formatDistanceToNow(new Date(2016, 0, 1))}`\n    }\n  ]);\n\n  useEffect(() => {\n    const taskIds = tasks.reduce((acc: Array<TaskTypes>, task: TaskTypes) => ([...acc, {\n      id_: shortid.generate(),\n      ...task\n    }]), []);\n\n    setTask(taskIds);\n    setFilterList(createFilterList(taskIds, filter));\n  }, []);\n\n  useEffect(() => {\n    const counter: number = tasks.reduce((acc, task: TaskTypes): number => {\n      if (task.status !== 'completed')\n        acc++;\n      return acc;\n    }, 0);\n    setCount(counter);\n  }, [tasks]);\n\n  const handleCompletedTask = (id: string | null): void => {\n    const copy: Array<TaskTypes> = [...tasks];\n    const index: number = tasks.findIndex(({ id_ }: TaskTypes) => id_ === id);\n    const status: string | undefined = copy[index].status;\n\n    copy[index].status = status === 'completed' ? 'active' : 'completed';\n    setTask(copy);\n    setFilterList(createFilterList(copy, filter));\n  };\n\n  const handleRemoveTask = (id: string | null): void => {\n    const copy: Array<TaskTypes> = [...tasks];\n    const index: number = tasks.findIndex(({ id_ }: TaskTypes) => id_ === id);\n    if (index !== -1) {\n      copy.splice(index, 1);\n      setTask(copy);\n      setFilterList(createFilterList(copy, filter));\n    }\n  };\n\n  const handleRemoveAllCompletedTask = (): void => {\n    const copy: Array<TaskTypes> = [...tasks].filter(({ status }: TaskTypes) => status !== 'completed');\n\n    setTask(copy);\n    setFilterList(createFilterList(copy, filter));\n  };\n\n  const handleSetFilter = (filterName: string): void => {\n    setFilter(filterName);\n    setFilterList(createFilterList([...tasks], filterName));\n  };\n\n  const handleEditingTask = (id: string | null, value: string): void => {\n    const copy: Array<TaskTypes> = [...tasks];\n    const index: number = tasks.findIndex(({ id_ }: TaskTypes) => id_ === id);\n\n    copy[index].status = 'Active';\n    copy[index].description = value;\n    setTask(copy);\n    setFilterList(createFilterList(copy, filter));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <Header />\n      <section className=\"main\">\n        <CompletedTask.Provider value={handleCompletedTask}>\n          <RemoveTask.Provider value={handleRemoveTask}>\n            <EditidTask.Provider value={handleEditingTask}>\n              <TaskList tasks={filterList} />\n            </EditidTask.Provider>\n          </RemoveTask.Provider>\n        </CompletedTask.Provider>\n        <SetFilter.Provider value={handleSetFilter}>\n          <Footer\n            removeAllCompletedTask={handleRemoveAllCompletedTask}\n            counter={count}\n            currentFilter={filter}\n          />\n        </SetFilter.Provider>\n      </section>\n    </section>\n  );\n};\n\nexport default App;\n","import App from './App';\n\nexport default App;","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/App';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}