{"version":3,"sources":["components/context/AddTask.ts","components/NewTaskForm/index.js","components/NewTaskForm/NewTaskForm.tsx","components/Header/index.js","components/Header/Header.tsx","components/context/SetFilter.ts","components/TasksFilter/TasksFilter.tsx","components/TasksFilter/index.js","components/Footer/index.js","components/Footer/Footer.tsx","components/context/CompletedTask.ts","components/context/EditidTask.ts","components/context/RemoveTask.ts","components/Task/index.js","components/Task/Task.tsx","components/TaskList/index.js","components/TaskList/TaskList.tsx","components/App/App.tsx","components/App/index.js","index.tsx"],"names":["AddTask","createContext","NewTaskForm","useState","value","setValue","addTask","useContext","className","placeholder","autoFocus","onChange","evt","target","onKeyUp","keyCode","Header","SetFilterContext","filters","TasksFilter","currentFilter","setFilterContext","SetFilter","handleSetFilter","dataset","filter","filtersList","map","key","shortid","generate","type","onClick","data-filter","Footer","removeAllCompletedTask","counter","CompletedTaskContext","EditidTask","RemoveTaskContext","Task","id_","status","description","created","completedTask","CompletedTask","removeTask","RemoveTask","editidTask","defaultChecked","TaskList","tasks","task","createFilterList","list","filterName","filterList","toUpperCase","substr","App","count","setCount","setFilter","setFilterList","formatDistanceToNow","Date","setTask","useEffect","taskIds","reduce","acc","Provider","newTask","id","copy","index","findIndex","splice","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98b5da15.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst AddTask = createContext<((value: string) => void) | null>(null);\n\nexport default AddTask;\n","import NewTaskForm from './NewTaskForm.tsx';\n\nexport default NewTaskForm;\n","import React, { useState, useContext } from 'react';\n\nimport AddTask from './../context/AddTask';\nimport './index.css';\n\nconst NewTaskForm: React.FC = () => {\n  const [value, setValue] = useState<string>('');\n  const addTask = useContext<((value: string) => void) | null>(AddTask);\n\n  const handleAddTask = (evt: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (evt.keyCode === 13 && addTask) {\n      const target: any = evt.target;\n      addTask(target.value);\n      setValue('');\n    }\n  };\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>): void => {\n    const target: any = evt.target;\n    setValue(target.value);\n  };\n\n  return (\n    <input\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      value={value}\n      autoFocus\n      onChange={handleChange}\n      onKeyUp={handleAddTask}\n    />\n  );\n};\n\nexport default NewTaskForm;\n","import Header from './Header.tsx';\n\nexport default Header;\n","import React from 'react';\n\nimport NewTaskForm from './../NewTaskForm';\nimport './index.css';\n\nconst Header: React.FC = () => {\n  return (\n    <header className=\"header\">\n      <h1>className</h1>\n      <NewTaskForm />\n    </header>\n  );\n};\n\nexport default Header;\n","import { createContext } from 'react';\n\nconst SetFilterContext = createContext<Function | null>(null);\n\nexport default SetFilterContext;\n","import React, { useContext } from 'react';\nimport shortid from 'shortid';\n\nimport SetFilter from '../context/SetFilter';\nimport TaskFilterTypes from '../interfaces/ITaskFilterTypes';\nimport './index.css';\n\nconst filters: Array<string> = ['All', 'Active', 'Completed'];\n\nconst TasksFilter = ({ currentFilter }: TaskFilterTypes): JSX.Element => {\n  const setFilterContext = useContext(SetFilter);\n\n  const handleSetFilter = (evt: React.MouseEvent<HTMLButtonElement>): void => {\n    if (setFilterContext) {\n      const { target }: any = evt;\n      setFilterContext(target.dataset.filter);\n    }\n  };\n\n  const filtersList: Array<JSX.Element> = filters.map((filter: string) => (\n    <li key={shortid.generate()}>\n      <button\n        type=\"button\"\n        className={currentFilter === filter ? 'selected' : ''}\n        onClick={handleSetFilter}\n        data-filter={filter}\n      >\n        {filter}\n      </button>\n    </li>\n  ));\n\n  return <ul className=\"filters\">{filtersList}</ul>;\n};\n\nexport default TasksFilter;\n","import TasksFilter from './TasksFilter.tsx';\n\nexport default TasksFilter;\n","import Footer from './Footer.tsx';\n\nexport default Footer;\n","import React from 'react';\n\nimport TasksFilter from '../TasksFilter';\nimport './index.css';\n\ntype FooterProps = {\n  removeAllCompletedTask: Function;\n  counter: number;\n  currentFilter: string;\n};\n\nconst Footer: React.FC<{\n  removeAllCompletedTask: Function;\n  counter: number;\n  currentFilter: string;\n}> = ({ removeAllCompletedTask, counter, currentFilter }: FooterProps) => {\n  const handleRemoveAllCompletedTask = (): void => {\n    if (removeAllCompletedTask) removeAllCompletedTask();\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{counter} items left</span>\n      <TasksFilter currentFilter={currentFilter} />\n      <button type=\"button\" className=\"clear-completed\" onClick={handleRemoveAllCompletedTask}>\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import { createContext } from 'react';\n\nconst CompletedTaskContext = createContext<((id_: string | null) => void) | null>(null);\n\nexport default CompletedTaskContext;\n","import { createContext } from 'react';\n\nconst EditidTask = createContext<((id: string | null, value: string) => void) | null>(null);\n\nexport default EditidTask;\n","import { createContext } from 'react';\n\nconst RemoveTaskContext = createContext<((id: string | null) => void) | null>(null);\n\nexport default RemoveTaskContext;\n","import Task from './Task.tsx';\n\nexport default Task;\n","import React, { useState, useContext } from 'react';\n\nimport CompletedTask from '../context/CompletedTask';\nimport EditidTask from '../context/EditidTask';\nimport RemoveTask from '../context/RemoveTask';\nimport TaskTypes from '../interfaces/ITask';\n\ntype fnType = ((id: string | null, value?: string) => void) | null;\n\nconst Task = ({ id_, status, description, created }: TaskTypes): JSX.Element => {\n  const [value, setValue] = useState<string>(description);\n  const completedTask = useContext<fnType>(CompletedTask);\n  const removeTask = useContext<fnType>(RemoveTask);\n  const editidTask = useContext<((id: string | null, value: string) => void) | null>(EditidTask);\n\n  const handleToggleCompleteTask = (): void => {\n    if (completedTask && id_) completedTask(id_);\n  };\n\n  const handleRemoveTask = (): void => {\n    if (removeTask && id_) removeTask(id_);\n  };\n\n  const handleChangeValue = (evt: React.KeyboardEvent<HTMLInputElement>): void => {\n    const { target }: any = evt;\n    if (editidTask && id_) {\n      if (evt.keyCode === 13) {\n        editidTask(id_, target.value);\n      }\n    }\n  };\n\n  const handleChangeData = (evt: React.ChangeEvent<HTMLInputElement>): void => {\n    const { target } = evt;\n    setValue(target.value);\n  };\n\n  return (\n    <li className={status}>\n      <div className=\"view\">\n        <input\n          className=\"toggle\"\n          type=\"checkbox\"\n          defaultChecked={status === 'completed'}\n          onChange={handleToggleCompleteTask}\n        />\n        <label>\n          <span className=\"description\">{description}</span>\n          <span className=\"created\">created {created} ago</span>\n        </label>\n        <button type=\"button\" className=\"icon icon-edit\" />\n        <button type=\"button\" className=\"icon icon-destroy\" onClick={handleRemoveTask} />\n      </div>\n      {status === 'editing' && (\n        <input type=\"text\" className=\"edit\" onChange={handleChangeData} onKeyUp={handleChangeValue} value={value} />\n      )}\n    </li>\n  );\n};\n\nexport default Task;\n","import TaskList from './TaskList.tsx';\n\nexport default TaskList;\n","import React from 'react';\n\nimport TaskTypes from '../interfaces/ITask';\nimport Task from '../Task';\nimport './index.css';\n\nconst TaskList: React.FC<{ tasks: Array<TaskTypes> }> = ({ tasks }) => {\n  return (\n    <ul className=\"todo-list\">\n      {tasks.map(({ id_, ...task }: TaskTypes) => (\n        <Task key={id_} id_={id_} {...task} />\n      ))}\n    </ul>\n  );\n};\n\nexport default TaskList;\n","import React, { useState, useEffect } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport shortid from 'shortid';\n\nimport Header from '../Header';\nimport Footer from '../Footer';\nimport TaskList from '../TaskList';\n\nimport CompletedTask from '../context/CompletedTask';\nimport RemoveTask from '../context/RemoveTask';\nimport EditidTask from '../context/EditidTask';\nimport SetFilter from '../context/SetFilter';\nimport AddTask from '../context/AddTask';\nimport TaskTypes from '../interfaces/ITask';\nimport './index.css';\n\nconst createFilterList = (list: Array<TaskTypes>, filterName: string): Array<TaskTypes> => {\n  let filterList: Array<TaskTypes> = [];\n\n  switch (filterName) {\n    case 'All':\n      filterList = list;\n      break;\n    default:\n      filterList = list.filter(({ status }: TaskTypes) => {\n        if (status) {\n          return status[0].toUpperCase() + status.substr(1) === filterName;\n        }\n        return false;\n      });\n      break;\n  }\n\n  return filterList;\n};\n\nconst App: React.FC = () => {\n  const [count, setCount] = useState<number>(0);\n  const [filter, setFilter] = useState<string>('All');\n  const [filterList, setFilterList] = useState<Array<TaskTypes>>([]);\n  const [tasks, setTask] = useState<Array<TaskTypes>>([\n    {\n      status: 'completed',\n      description: 'Completed task',\n      created: `${formatDistanceToNow(new Date(2014, 6, 2))}`,\n    },\n    {\n      status: 'active',\n      description: 'Editing task',\n      created: `${formatDistanceToNow(new Date(2015, 0, 1, 0, 0, 15))} `,\n    },\n    {\n      status: 'active',\n      description: 'Active task',\n      created: `${formatDistanceToNow(new Date(2016, 0, 1))}`,\n    },\n  ]);\n\n  useEffect(() => {\n    const taskIds: Array<TaskTypes> = tasks.reduce(\n      (acc: Array<TaskTypes>, task: TaskTypes) => [\n        ...acc,\n        {\n          id_: shortid.generate(),\n          ...task,\n        },\n      ],\n      []\n    );\n\n    setTask(taskIds);\n    setFilterList(createFilterList(taskIds, filter));\n  }, []);\n\n  useEffect(() => {\n    const counter: number = tasks.reduce((acc, task: TaskTypes): number => {\n      if (task.status !== 'completed') return acc + 1;\n      return acc;\n    }, 0);\n    setCount(counter);\n  }, [tasks]);\n\n  const handleCompletedTask = (id: string | null): void => {\n    const copy: Array<TaskTypes> = [...tasks];\n    const index: number = tasks.findIndex(({ id_ }: TaskTypes) => id_ === id);\n    const { status } = copy[index];\n\n    copy[index].status = status === 'completed' ? 'active' : 'completed';\n    setTask(copy);\n    setFilterList(createFilterList(copy, filter));\n  };\n\n  const handleRemoveTask = (id: string | null): void => {\n    const copy: Array<TaskTypes> = [...tasks];\n    const index: number = tasks.findIndex(({ id_ }: TaskTypes) => id_ === id);\n    if (index !== -1) {\n      copy.splice(index, 1);\n      setTask(copy);\n      setFilterList(createFilterList(copy, filter));\n    }\n  };\n\n  const handleRemoveAllCompletedTask = (): void => {\n    const copy: Array<TaskTypes> = [...tasks].filter(({ status }: TaskTypes) => status !== 'completed');\n\n    setTask(copy);\n    setFilterList(createFilterList(copy, filter));\n  };\n\n  const handleSetFilter = (filterName: string): void => {\n    setFilter(filterName);\n    setFilterList(createFilterList([...tasks], filterName));\n  };\n\n  const handleEditingTask = (id: string | null, value: string): void => {\n    const copy: Array<TaskTypes> = [...tasks];\n    const index: number = tasks.findIndex(({ id_ }: TaskTypes) => id_ === id);\n\n    copy[index].status = 'Active';\n    copy[index].description = value;\n    setTask(copy);\n    setFilterList(createFilterList(copy, filter));\n  };\n\n  const handleAddTask = (value: string): void => {\n    const newTask: TaskTypes = {\n      id_: shortid.generate(),\n      status: 'Active',\n      description: value,\n      created: formatDistanceToNow(new Date()),\n    };\n    setTask([...tasks, newTask]);\n    setFilterList(createFilterList([...tasks, newTask], filter));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <AddTask.Provider value={handleAddTask}>\n        <Header />\n      </AddTask.Provider>\n      <section className=\"main\">\n        <CompletedTask.Provider value={handleCompletedTask}>\n          <RemoveTask.Provider value={handleRemoveTask}>\n            <EditidTask.Provider value={handleEditingTask}>\n              <TaskList tasks={filterList} />\n            </EditidTask.Provider>\n          </RemoveTask.Provider>\n        </CompletedTask.Provider>\n        <SetFilter.Provider value={handleSetFilter}>\n          <Footer removeAllCompletedTask={handleRemoveAllCompletedTask} counter={count} currentFilter={filter} />\n        </SetFilter.Provider>\n      </section>\n    </section>\n  );\n};\n\nexport default App;\n","import App from './App.tsx';\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/App';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}