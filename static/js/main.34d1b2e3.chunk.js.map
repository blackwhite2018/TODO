{"version":3,"sources":["components/NewTaskForm/index.js","components/NewTaskForm/NewTaskForm.tsx","components/Header/index.js","components/Header/Header.tsx","components/TasksFilter/TasksFilter.tsx","components/TasksFilter/index.js","components/Footer/index.js","components/Footer/Footer.tsx","components/Task/index.js","components/Task/Task.tsx","components/TaskList/index.js","components/TaskList/TaskList.tsx","components/App/App.tsx","components/App/index.js","index.tsx"],"names":["NewTaskForm","handleAddTask","useState","value","setValue","className","placeholder","autoFocus","onChange","evt","target","onKeyUp","keyCode","Header","filters","TasksFilter","handleSetFilter","currentFilter","handleFilter","dataset","filter","filtersList","map","key","shortid","generate","type","onClick","data-filter","Footer","removeAllCompletedTask","counter","Task","handlePauseTask","handlePlayTask","handleCompletedTask","handleRemoveTask","handleEditingTask","id_","status","description","created","time","defaultChecked","formatDistanceToNow","Date","TaskList","tasks","task","createFilterList","list","filterName","filterList","toUpperCase","substr","App","count","setCount","setFilter","setFilterList","timerID","timer","setTask","useEffect","taskIds","reduce","acc","copy","setInterval","forEach","clearInterval","id","date","newTask","getFullYear","getMonth","getDate","index","findIndex","splice","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34d1b2e3.chunk.js","sourcesContent":["import NewTaskForm from './NewTaskForm.tsx';\n\nexport default NewTaskForm;\n","import React, { useState } from 'react';\n\nimport IHeaderProps from '../interfaces/IHeaderProps';\nimport './index.css';\n\nconst NewTaskForm = ({ handleAddTask }: IHeaderProps) => {\n  const [value, setValue] = useState<string>('');\n\n  const handleAdd = (evt: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (evt.keyCode === 13 && handleAddTask) {\n      const { target }: any = evt;\n      handleAddTask(target.value);\n      setValue('');\n    }\n  };\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>): void => {\n    const { target } = evt;\n    setValue(target.value);\n  };\n\n  return (\n    <input\n      className=\"new-todo\"\n      placeholder=\"Task\"\n      value={value}\n      autoFocus\n      onChange={handleChange}\n      onKeyUp={handleAdd}\n    />\n  );\n};\n\nexport default NewTaskForm;\n","import Header from './Header.tsx';\n\nexport default Header;\n","import React from 'react';\n\nimport IHeaderProps from '../interfaces/IHeaderProps';\nimport NewTaskForm from '../NewTaskForm';\nimport './index.css';\n\nconst Header = ({ handleAddTask }: IHeaderProps) => {\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n      <NewTaskForm handleAddTask={handleAddTask} />\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport shortid from 'shortid';\n\nimport TaskFilterTypes from '../interfaces/ITaskFilterTypes';\nimport './index.css';\n\nconst filters: Array<string> = ['All', 'Active', 'Completed'];\n\nconst TasksFilter = ({ handleSetFilter, currentFilter }: TaskFilterTypes): JSX.Element => {\n  const handleFilter = (evt: React.MouseEvent<HTMLButtonElement>): void => {\n    if (handleSetFilter) {\n      const { target }: any = evt;\n      handleSetFilter(target.dataset.filter);\n    }\n  };\n\n  const filtersList: Array<JSX.Element> = filters.map((filter: string) => (\n    <li key={shortid.generate()}>\n      <button\n        type=\"button\"\n        className={currentFilter === filter ? 'selected' : ''}\n        onClick={handleFilter}\n        data-filter={filter}\n      >\n        {filter}\n      </button>\n    </li>\n  ));\n\n  return <ul className=\"filters\">{filtersList}</ul>;\n};\n\nexport default TasksFilter;\n","import TasksFilter from './TasksFilter.tsx';\n\nexport default TasksFilter;\n","import Footer from './Footer.tsx';\n\nexport default Footer;\n","import React from 'react';\n\nimport TasksFilter from '../TasksFilter';\nimport './index.css';\n\ntype FooterProps = {\n  removeAllCompletedTask: Function;\n  counter: number;\n  currentFilter: string;\n  handleSetFilter: Function;\n};\n\nconst Footer = ({ handleSetFilter, removeAllCompletedTask, counter, currentFilter }: FooterProps) => {\n  const handleRemoveAllCompletedTask = (): void => {\n    if (removeAllCompletedTask) removeAllCompletedTask();\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{counter} items left</span>\n      <TasksFilter handleSetFilter={handleSetFilter} currentFilter={currentFilter} />\n      <button type=\"button\" className=\"clear-completed\" onClick={handleRemoveAllCompletedTask}>\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import Task from './Task.tsx';\n\nexport default Task;\n","import React, { useState } from 'react';\nimport { formatDistanceToNow, format } from 'date-fns';\n\nconst Task = ({\n  handlePauseTask,\n  handlePlayTask,\n  handleCompletedTask,\n  handleRemoveTask,\n  handleEditingTask,\n  id_,\n  status,\n  description,\n  created,\n  time,\n}: any): JSX.Element => {\n  const [value, setValue] = useState<string>(description);\n\n  const handleToggleCompleteTask = (): void => {\n    if (handleCompletedTask && id_) handleCompletedTask(id_);\n  };\n\n  const handleRemove = (): void => {\n    if (handleRemoveTask && id_) handleRemoveTask(id_);\n  };\n\n  const handleChangeValue = (evt: React.KeyboardEvent<HTMLInputElement>): void => {\n    const { target }: any = evt;\n    if (handleEditingTask && id_) {\n      if (evt.keyCode === 13) {\n        handleEditingTask(id_, target.value);\n      }\n    }\n  };\n\n  const handleChangeData = (evt: React.ChangeEvent<HTMLInputElement>): void => {\n    const { target } = evt;\n    setValue(target.value);\n  };\n\n  const handlePlay = () => {\n    if (id_) handlePlayTask(id_);\n  };\n\n  const handlePause = () => {\n    if (id_) handlePauseTask(id_);\n  };\n\n  return (\n    <li className={status}>\n      <div className=\"view\">\n        <input\n          className=\"toggle\"\n          type=\"checkbox\"\n          defaultChecked={status === 'completed'}\n          onChange={handleToggleCompleteTask}\n        />\n        <label>\n          <span className=\"title\">{description}</span>\n          <span className=\"description\">\n            <button type=\"button\" onClick={handlePlay} className=\"icon icon-play\" />\n            <button type=\"button\" onClick={handlePause} className=\"icon icon-pause\" />\n            {time}\n          </span>\n          <span className=\"description\">{formatDistanceToNow(new Date(created))}</span>\n        </label>\n        <button type=\"button\" className=\"icon icon-edit\" />\n        <button type=\"button\" className=\"icon icon-destroy\" onClick={handleRemove} />\n      </div>\n      {status === 'editing' && (\n        <input type=\"text\" className=\"edit\" onChange={handleChangeData} onKeyUp={handleChangeValue} value={value} />\n      )}\n    </li>\n  );\n};\n\nexport default Task;\n","import TaskList from './TaskList.tsx';\n\nexport default TaskList;\n","import React from 'react';\n\nimport TaskTypes from '../interfaces/ITask';\nimport TaskListProps from '../interfaces/ITaskListProps';\nimport Task from '../Task';\nimport './index.css';\n\nconst TaskList: React.FC<TaskListProps> = ({\n  handlePauseTask,\n  handlePlayTask,\n  handleCompletedTask,\n  handleRemoveTask,\n  handleEditingTask,\n  tasks,\n}) => {\n  return (\n    <ul className=\"todo-list\">\n      {tasks.map(({ id_, ...task }: TaskTypes) => (\n        <Task\n          key={id_}\n          id_={id_}\n          {...task}\n          handleCompletedTask={handleCompletedTask}\n          handleRemoveTask={handleRemoveTask}\n          handleEditingTask={handleEditingTask}\n          handlePlayTask={handlePlayTask}\n          handlePauseTask={handlePauseTask}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default TaskList;\n","import React, { useState, useEffect } from 'react';\nimport shortid from 'shortid';\n\nimport Header from '../Header';\nimport Footer from '../Footer';\nimport TaskList from '../TaskList';\n\nimport TaskTypes from '../interfaces/ITask';\nimport './index.css';\n\nconst createFilterList = (list: Array<TaskTypes>, filterName: string): Array<TaskTypes> => {\n  let filterList: Array<TaskTypes> = [];\n\n  switch (filterName) {\n    case 'All':\n      filterList = list;\n      break;\n    default:\n      filterList = list.filter(({ status }: TaskTypes) => {\n        if (status) {\n          return status[0].toUpperCase() + status.substr(1) === filterName;\n        }\n        return false;\n      });\n      break;\n  }\n\n  return filterList;\n};\n\nconst App: React.FC = () => {\n  const [count, setCount] = useState<number>(0);\n  const [filter, setFilter] = useState<string>('All');\n  const [filterList, setFilterList] = useState<Array<TaskTypes>>([]);\n  const [tasks, setTask] = useState<Array<TaskTypes>>([\n    {\n      status: 'completed',\n      description: 'Completed task',\n      created: '2014, 6, 2',\n      time: 0,\n      timerID: 0,\n      timer: true,\n    },\n    {\n      status: 'active',\n      description: 'Editing task',\n      created: '2015, 1, 1',\n      time: 0,\n      timerID: 0,\n      timer: false,\n    },\n    {\n      status: 'active',\n      description: 'Active task',\n      created: '2016, 2, 1',\n      time: 0,\n      timerID: 0,\n      timer: false,\n    },\n  ]);\n\n  useEffect(() => {\n    const taskIds: Array<TaskTypes> = tasks.reduce(\n      (acc: Array<TaskTypes>, task: TaskTypes) => [\n        ...acc,\n        {\n          id_: shortid.generate(),\n          ...task,\n        },\n      ],\n      []\n    );\n\n    setTask(taskIds);\n    setFilterList(createFilterList(taskIds, filter));\n  }, []);\n\n  useEffect(() => {\n    const counter: number = tasks.reduce((acc, task: TaskTypes): number => {\n      if (task.status !== 'completed') return acc + 1;\n      return acc;\n    }, 0);\n    setCount(counter);\n    const copy: any = [...tasks].reduce((acc: any, task): any => {\n      return [\n        ...acc,\n        {\n          ...task,\n          timerID: !task.timer\n            ? 0\n            : setInterval(() => {\n              setTask(copy);\n              setFilterList(createFilterList(copy, filter));\n            }, 1000),\n          time: task.timer ? task.time : task.time + 1,\n        },\n      ];\n    }, []);\n    return () => {\n      copy.forEach((task: TaskTypes) => {\n        clearInterval(task.timerID);\n      });\n      setFilterList(createFilterList(copy, filter));\n    };\n  }, [tasks]);\n\n  const handleCompletedTask = (id: string | null): void => {\n    const copy: Array<TaskTypes> = [...tasks];\n    const index: number = tasks.findIndex(({ id_ }: TaskTypes) => id_ === id);\n    const { status } = copy[index];\n\n    copy[index].status = status === 'completed' ? 'active' : 'completed';\n    setTask(copy);\n    setFilterList(createFilterList(copy, filter));\n  };\n\n  const handleRemoveTask = (id: string | null): void => {\n    const copy: Array<TaskTypes> = [...tasks];\n    const index: number = tasks.findIndex(({ id_ }: TaskTypes) => id_ === id);\n    if (index !== -1) {\n      copy.splice(index, 1);\n      setTask(copy);\n      setFilterList(createFilterList(copy, filter));\n    }\n  };\n\n  const handleRemoveAllCompletedTask = (): void => {\n    const copy: Array<TaskTypes> = [...tasks].filter(({ status }: TaskTypes) => status !== 'completed');\n\n    setTask(copy);\n    setFilterList(createFilterList(copy, filter));\n  };\n\n  const handleSetFilter = (filterName: string): void => {\n    setFilter(filterName);\n    setFilterList(createFilterList([...tasks], filterName));\n  };\n\n  const handleEditingTask = (id: string | null, value: string): void => {\n    const copy: Array<TaskTypes> = [...tasks];\n    const index: number = tasks.findIndex(({ id_ }: TaskTypes) => id_ === id);\n\n    copy[index].status = 'Active';\n    copy[index].description = value;\n    setTask(copy);\n    setFilterList(createFilterList(copy, filter));\n  };\n\n  const handleAddTask = (value: string): void => {\n    const id = shortid.generate();\n    const date = new Date();\n    const newTask: TaskTypes = {\n      id_: id,\n      status: 'Active',\n      description: value,\n      created: `${date.getFullYear()}, ${date.getMonth()}, ${date.getDate()}`,\n      timerID: 0,\n      time: 0,\n      timer: false,\n    };\n    const copy = [...tasks, newTask];\n    setTask(copy);\n    setFilterList(createFilterList(copy, filter));\n  };\n\n  const handlePauseTask = (id: string) => {\n    const copy: Array<TaskTypes> = [...tasks];\n    const index: number = tasks.findIndex(({ id_ }: TaskTypes) => id_ === id);\n    if (index !== -1) {\n      if (!copy[index].timer) {\n        copy[index].timerID = setInterval(() => {\n          copy[index].time += 1;\n        }, 1000);\n        copy[index].timer = true;\n      }\n    }\n    setTask(copy);\n    setFilterList(createFilterList(copy, filter));\n  };\n\n  const handlePlayTask = (id: string) => {\n    const copy: Array<TaskTypes> = [...tasks];\n    const index: number = tasks.findIndex(({ id_ }: TaskTypes) => id_ === id);\n    if (index !== -1) {\n      if (copy[index].timer) {\n        clearInterval(copy[index].timerID);\n        copy[index].timer = false;\n      }\n    }\n    setTask(copy);\n    setFilterList(createFilterList(copy, filter));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <Header handleAddTask={handleAddTask} />\n      <section className=\"main\">\n        <TaskList\n          tasks={filterList}\n          handleCompletedTask={handleCompletedTask}\n          handleRemoveTask={handleRemoveTask}\n          handleEditingTask={handleEditingTask}\n          handlePlayTask={handlePlayTask}\n          handlePauseTask={handlePauseTask}\n        />\n        <Footer\n          removeAllCompletedTask={handleRemoveAllCompletedTask}\n          counter={count}\n          currentFilter={filter}\n          handleSetFilter={handleSetFilter}\n        />\n      </section>\n    </section>\n  );\n};\n\nexport default App;\n","import App from './App.tsx';\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/App';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}